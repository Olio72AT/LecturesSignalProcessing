
print("... Configuring matplotlib formats")
print("... Configuring matplotlib with inline figures")

%config InlineBackend.figure_format = 'retina'
#In new notebooks created for IPython 1.0+, I would recommend using %matplotlib inline, since it is more tidy 
# and you have more control over which packages are imported and how. Commonly, scipy and numpy are imported separately with:
# from: http://nbviewer.ipython.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb#Versions
#%config InlineBackend.figure_format = 'svg' #this is depreceated in 2.x
%config InlineBackend.figure_formats = {'retina', 'pdf', 'png', 'svg', 'jpeg'}

print("... Importing numpy as np, scipy as sp, pyplot as plt, scipy.stats as stats")
print("   ... scipy.signal as sig")
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import scipy.stats as stats
import scipy.signal as sig
# Also import pylab for more easy interactive use (but less control)
from pylab import *

print("... Importing widgets, display, HTML, Image, Javascript")
#For displaying widgets
import ipywidgets as widgets
from ipywidgets import interact, interactive, fixed
from IPython.display import clear_output, display, HTML, Image, Javascript, JSON

#Some specific imports for plotting

### -------------
print("... Some LaTeX definitions")

LaTeXdefs="""
$$\\require{color}
\\require{cancel}
\\def\\tf#1{{\\mathrm{FT}\\left\{ #1 \\right\\}}}
\\def\\flecheTF{\\rightleftharpoons }
\\def\\TFI#1#2#3{{\\displaystyle{\\int_{-\\infty}^{+\\infty} #1 ~e^{j2\\pi #2 #3} 
~\\dr{#2}}}}
\\def\\TF#1#2#3{{\\displaystyle{\\int_{-\\infty}^{+\\infty} #1 ~e^{-j2\\pi #3 #2} 
~\\dr{#2}}}}
\\def\\sha{Ñˆ}
\\def\\dr#1{\\mathrm{d}#1}
\\def\\egalpardef{\\mathop{=}\\limits^\\triangle}
\\def\\sinc#1{{\\mathrm{sinc}\\left( #1 \\right)}}
\\def\\rect{\\mathrm{rect}}
\\definecolor{lightred}{rgb}{1,0.1,0}
\\def\myblueeqbox#1{{\\fcolorbox{blue}{lightblue}{$\textcolor{blue}{ #1}$}}}
\\def\\myeqbox#1#2{{\\fcolorbox{#1}{light#1}{$\textcolor{#1}{ #2}$}}}
\\def\\eqbox#1#2#3#4{{\\fcolorbox{#1}{#2}{$\\textcolor{#3}{ #4}$}}}
% border|background|text
\\def\\eqboxa#1{{\\boxed{#1}}}
\\def\\eqboxb#1{{\\eqbox{green}{white}{green}{#1}}}
\\def\\eqboxc#1{{\\eqbox{blue}{white}{blue}{#1}}}
\\def\\eqboxd#1{{\\eqbox{blue}{lightblue}{blue}{#1}}}
\\def\\E#1{\\mathbb{E}\\left[#1\\right]}
\\def\\ta#1{\\left<#1\\right>}
\\def\\egalparerg{{\\mathop{=}\\limits_\\mathrm{erg}}}
\\def\\expo#1{\\exp\\left(#1\\right)}
\\def\\d#1{\\mathrm{d}#1}
\\def\\wb{\\mathbf{w}} 
\\def\\sb{\\mathbf{s}} 
\\def\\xb{\\mathbf{x}}
\\def\\Rb{\\mathbf{R}} 
\\def\\rb{\mathbf{r}} 
\\def\\mystar{{*}}
\\def\\ub{\\mathbf{u}}
\\def\\wbopt{\\mathop{\\mathbf{w}}\\limits^\\triangle}
\\def\\deriv#1#2{\\frac{\\mathrm{d}#1}{\\mathrm{d}#2}}
\\def\\Ub{\\mathbf{U}}
\\def\\db{\\mathbf{d}}
\\def\\eb{\\mathbf{e}}
\\def\\vb{\\mathbf{v}}
\\def\\Ib{\\mathbf{I}}
\\def\\Vb{\\mathbf{V}}
\\def\\Lambdab{\\mathbf{\\Lambda}}
\\def\\Ab{\\mathbf{A}}
\\def\\Bb{\\mathbf{B}}
\\def\\Cb{\\mathbf{C}}
\\def\\Db{\\mathbf{D}}
\\def\\Kb{\\mathbf{K}}
\\def\\sinc#1{\\mathrm{sinc\\left(#1\\right)}}
$$
"""

display(HTML(LaTeXdefs))

### ----------------------------------
%matplotlib inline

print("... Defining figures captions ")

display(HTML(
"""<style>
.caption {
font-weight: normal;
text-align: left;
width:60%; margin-left:10%; border:2px solid; padding-top:5px; padding-bottom:5px;
background-color:white;border-color:#efd3d7;color:black;
border-radius:8px;-webkit-border-radius:8px;-moz-border-radius:8px;border-radius:8px
}
</style>"""))

#def figcaption(text,label=""):
#    display(HTML("<div class=caption><b> Caption: </b> %s</div>"  % text.replace('\n','<br>')))

def figcaption(text, label=" "):
    display(HTML("<div class=caption><b> Caption: </b> %s</div>"
                 % text.replace('\n', '<br>')))
    text = text.replace('<b>',r'\textbf{').replace('</b>','}') #some replacement of HTML formatting
    text = text.replace('<i>',r'\textit{').replace('</i>','}')
    text = text.replace('<tt>',r'\texttt{').replace('</tt>','}')
    display(JSON({'caption': text, 'label':label}),include=["application/json"])

### -------------------------------------------------
# A stub function
def js_addon():
    pass	

print("... Loading customized Javascript for interactive solutions (show/hide)")
from interactive_sols import process_solution, unhide_next_cell, unhide_all_cells
show_solution=process_solution
#%run interactive_sols.ipy

## ---------------------------------------------------
print("... Redefining interactive from ipywidgets")

# Redefine interactive, because in the new version, return of functions 
# is automatically displayed. That is the way it is, see https://github.com/ipython/ipywidgets/issues/162
# Thus what we do is to catch the call, redefine the function to hide its return.
# Then it is always possible to call directly the original function and get its return value.
# Also, it is possible to call it with the parameters selected from the interactive function
# by func(**ww.kwargs) where ww is the object returned by intercative or interact. 

def interactive(f,*args,**kwargs):
    import ipywidgets
    def fn(*args,**kwargs):
        f(*args,**kwargs)
    w=ipywidgets.interactive(fn,*args,**kwargs)
    return w

example=False
if example:
    #func(**ww.kwargs)
    def func(x,y,col="red"):
        print(x,y)
        return x+y

    ww=interactive(func,x=[1,10],y=[3,7],col=("red","blue"))
    ww

## ---------------------------------------------------
print("... Redefining capture for ipywidgets < 7")

import ipywidgets
if ipywidgets._version.version_info[0]<7:
    from functools import  wraps
    # ipywidgets.widgets.widget_output.Output.capture = capture
    #
    def capture(self, clear_output=False, *clear_args, **clear_kwargs):
        """
        Decorator to capture the stdout and stderr of a function.
         Parameters
        ----------
         clear_output: bool
            If True, clear the content of the output widget at every
            new function call. Default: False
         wait: bool
            If True, wait to clear the output until new output is
            available to replace it. This is only used if clear_output
            is also True.
            Default: False  
         usage: 
             >> from ipywidgets import widgets
             >> out = widgets.Output()
             >> @out.capture(clear_output=True, wait=True)
             ... FUNCTION
             >> display(widgets.VBox([slide_k, out]))
        """
        def capture_decorator(func):
            @wraps(func)
            def inner(*args, **kwargs):
                if clear_output:
                    self.clear_output(*clear_args, **clear_kwargs)
                with self:
                    return func(*args, **kwargs)
            return inner
        return capture_decorator
    ipywidgets.widgets.widget_output.Output.capture = capture
